var capacity = 200;
var vehicles_number = 25;
var data =
    "0      40         50          0          0       1236          0\n"+   
    "1      45         68         10        912        967         90\n"+   
    "2      45         70         30        825        870         90\n"+   
    "3      42         66         10         65        146         90\n"+   
    "4      42         68         10        727        782         90\n"+   
    "5      42         65         10         15         67         90\n"+   
    "6      40         69         20        621        702         90\n"+   
    "7      40         66         20        170        225         90\n"+   
    "8      38         68         20        255        324         90\n"+   
    "9      38         70         10        534        605         90\n"+  
   "10      35         66         10        357        410         90\n"+   
   "11      35         69         10        448        505         90\n"+   
   "12      25         85         20        652        721         90\n"+   
   "13      22         75         30         30         92         90\n"+   
   "14      22         85         10        567        620         90\n"+   
   "15      20         80         40        384        429         90\n"+   
   "16      20         85         40        475        528         90\n"+   
   "17      18         75         20         99        148         90\n"+   
   "18      15         75         20        179        254         90\n"+   
   "19      15         80         10        278        345         90\n"+   
   "20      30         50         10         10         73         90\n"+   
   "21      30         52         20        914        965         90\n"+   
   "22      28         52         20        812        883         90\n"+   
   "23      28         55         10        732        777         90\n"+   
   "24      25         50         10         65        144         90\n"+   
   "25      25         52         40        169        224         90\n"+   
   "26      25         55         10        622        701         90\n"+   
   "27      23         52         10        261        316         90\n"+  
   "28      23         55         20        546        593         90\n"+   
   "29      20         50         10        358        405         90\n"+   
   "30      20         55         10        449        504         90\n"+   
   "31      10         35         20        200        237         90\n"+   
   "32      10         40         30         31        100         90\n"+   
   "33       8         40         40         87        158         90\n"+   
   "34       8         45         20        751        816         90\n"+   
   "35       5         35         10        283        344         90\n"+   
   "36       5         45         10        665        716         90\n"+  
   "37       2         40         20        383        434         90\n"+   
   "38       0         40         30        479        522         90\n"+   
   "39       0         45         20        567        624         90\n"+   
   "40      35         30         10        264        321         90\n"+   
   "41      35         32         10        166        235         90\n"+   
   "42      33         32         20         68        149         90\n"+   
   "43      33         35         10         16         80         90\n"+   
   "44      32         30         10        359        412         90\n"+   
   "45      30         30         10        541        600         90\n"+   
   "46      30         32         30        448        509         90\n"+   
   "47      30         35         10       1054       1127         90\n"+   
   "48      28         30         10        632        693         90\n"+   
   "49      28         35         10       1001       1066         90\n"+   
   "50      26         32         10        815        880         90\n"+   
   "51      25         30         10        725        786         90\n"+   
   "52      25         35         10        912        969         90\n"+   
   "53      44          5         20        286        347         90\n"+   
   "54      42         10         40        186        257         90\n"+   
   "55      42         15         10         95        158         90\n"+   
   "56      40          5         30        385        436         90\n"+   
   "57      40         15         40         35         87         90\n"+   
   "58      38          5         30        471        534         90\n"+   
   "59      38         15         10        651        740         90\n"+   
   "60      35          5         20        562        629         90\n"+   
   "61      50         30         10        531        610         90\n"+   
   "62      50         35         20        262        317         90\n"+   
   "63      50         40         50        171        218         90\n"+   
   "64      48         30         10        632        693         90\n"+   
   "65      48         40         10         76        129         90\n"+   
   "66      47         35         10        826        875         90\n"+   
   "67      47         40         10         12         77         90\n"+   
   "68      45         30         10        734        777         90\n"+   
   "69      45         35         10        916        969         90\n"+   
   "70      95         30         30        387        456         90\n"+   
   "71      95         35         20        293        360         90\n"+   
   "72      53         30         10        450        505         90\n"+   
   "73      92         30         10        478        551         90\n"+   
   "74      53         35         50        353        412         90\n"+   
   "75      45         65         20        997       1068         90\n"+   
   "76      90         35         10        203        260         90\n"+   
   "77      88         30         10        574        643         90\n"+   
   "78      88         35         20        109        170         90\n"+   
   "79      87         30         10        668        731         90\n"+   
   "80      85         25         10        769        820         90\n"+   
   "81      85         35         30         47        124         90\n"+   
   "82      75         55         20        369        420         90\n"+   
   "83      72         55         10        265        338         90\n"+   
   "84      70         58         20        458        523         90\n"+   
   "85      68         60         30        555        612         90\n"+   
   "86      66         55         10        173        238         90\n"+   
   "87      65         55         20         85        144         90\n"+   
   "88      65         60         30        645        708         90\n"+   
   "89      63         58         10        737        802         90\n"+   
   "90      60         55         10         20         84         90\n"+   
   "91      60         60         10        836        889         90\n"+   
   "92      67         85         20        368        441         90\n"+   
   "93      65         85         40        475        518         90\n"+   
   "94      65         82         10        285        336         90\n"+   
   "95      62         80         30        196        239         90\n"+   
   "96      60         80         10         95        156         90\n"+   
   "97      60         85         30        561        622         90\n"+   
   "98      58         75         20         30         84         90\n"+   
   "99      55         80         10        743        820         90\n"+   
  "100      55         85         20        647        726         90";

var nodes = [];
var dataArray = data.split("\n");
for(line of dataArray){	
	var params = trimSpaces(line).split(" ");
	var node = {
		id: 			parseInt(params[0]),
		x: 				parseInt(params[1]),
		y: 				parseInt(params[2]),
		demand: 		parseInt(params[3]),
		ready_time: 	parseInt(params[4]),
		due_time: 		parseInt(params[5]),
		service_time: 	parseInt(params[6]),
		distances:      {},
		distancesTemp:  {}
	};
	nodes.push(node);	
}
//calculate distace node to node
calculateDistances(nodes);
//create copy of each node distance
for(node of nodes){
	node.distancesTemp = clone(node.distances);
}

// Init nodeManager
nodeManeger = {
	nodes: 		loadNodes(nodes).sort(dynamicSort("due_time")),
	origin: 	findNode(this.nodes, 0),
	unvisited: 	this.nodes.slice(0)
};
removeNodeFromArray(nodeManeger.unvisited,nodeManeger.origin);

//Init routesManager

VARIATIONS = {}
VARIATIONS[1] =  { alfa_1: 1, alfa_2: 0, m: 1, lambda: 1 };
VARIATIONS[2] =  { alfa_1: 1, alfa_2: 0, m: 1, lambda: 2 };
VARIATIONS[3] =  { alfa_1: 0, alfa_2: 1, m: 1, lambda: 1 };
VARIATIONS[4] =  { alfa_1: 0, alfa_2: 1, m: 1, lambda: 2 };

routesManager = {
	routes: {
		criterion_1: {
			1: null,
			2: null,
			3: null,
			4: null
		},
		criterion_2: {
			1: null,
			2: null,
			3: null,
			4: null
		}
	},
	capacity: capacity,
	vehicles: vehicles_number
};

createRoutes();
show_routes();
